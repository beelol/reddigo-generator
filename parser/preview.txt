// GETApiV1MeResponse represents the response for GET /api/v1/me
type GETApiV1MeResponse struct {
	Username string `json:"username"` // The username of the user
}

/*
GETApiV1Me makes a GET request to /api/v1/me
ID: 1
Description: Returns the identity of the user.
*/
func GETApiV1Me() (GETApiV1MeResponse, error) {
	url := fmt.Sprintf("/api/v1/me")
	// Construct the request for GET method
	client := &http.Client{}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return GETApiV1MeResponse{}, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return GETApiV1MeResponse{}, err
	}
	defer resp.Body.Close()
	var response GETApiV1MeResponse
	if err := json.NewDecoder(resp.Body).Decode(&response); err != nil {
		return GETApiV1MeResponse{}, err
	}
	return response, nil
}


// POSTApiV1CollectionsCreateCollectionResponse represents the response for POST /api/v1/collections/create_collection
type POSTApiV1CollectionsCreateCollectionResponse struct {
	CollectionId string `json:"collection_id"` // The ID of the created collection
}

/*
POSTApiV1CollectionsCreateCollection makes a POST request to /api/v1/collections/create_collection
ID: 2
Description: Create a collection
*/
func POSTApiV1CollectionsCreateCollection(title string, description string, lang string) (POSTApiV1CollectionsCreateCollectionResponse, error) {
	url := fmt.Sprintf("/api/v1/collections/create_collection")
	payload := map[string]interface{}{
		"title": title,
		"description": description,
	}
	queryParams := urlpkg.Values{}
	queryParams.Add("lang", lang)
	url += "?" + queryParams.Encode()
	// Construct the request for POST method
	client := &http.Client{}
	req, err := http.NewRequest("POST", url, nil)
	if err != nil {
		return POSTApiV1CollectionsCreateCollectionResponse{}, err
	}
	jsonPayload, err := json.Marshal(payload)
	if err != nil {
		return POSTApiV1CollectionsCreateCollectionResponse{}, err
	}
	req.Header.Set("Content-Type", "application/json")
	req.Body = io.NopCloser(bytes.NewBuffer(jsonPayload))
	resp, err := client.Do(req)
	if err != nil {
		return POSTApiV1CollectionsCreateCollectionResponse{}, err
	}
	defer resp.Body.Close()
	var response POSTApiV1CollectionsCreateCollectionResponse
	if err := json.NewDecoder(resp.Body).Decode(&response); err != nil {
		return POSTApiV1CollectionsCreateCollectionResponse{}, err
	}
	return response, nil
}
