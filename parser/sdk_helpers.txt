package reddigo

import (
	"bytes"
	jsonpkg "encoding/json"
	"fmt"
	"io"
	"net/http"
	urlpkg "net/url"
	"strings"
	"time"
)

type RedditConfig struct {
	ClientID     string
	ClientSecret string
	AccessToken  string
	RefreshToken string
	UserAgent    string
}

type ReddiGoSDK struct {
	clientID     string
	clientSecret string
	accessToken  string
	refreshToken string
	userAgent    string
	tokenExpiry  time.Time
	httpClient   *http.Client
}

func NewReddiGoSDK(config RedditConfig) *ReddiGoSDK {
	return &ReddiGoSDK{
		clientID:     config.ClientID,
		clientSecret: config.ClientSecret,
		accessToken:  config.AccessToken,
		refreshToken: config.RefreshToken,
		userAgent:    config.UserAgent,
		tokenExpiry:  time.Now(),
		httpClient:   &http.Client{},
	}
}

// Function to refresh the access token
func (sdk *ReddiGoSDK) refreshTokenIfNeeded() error {
	// Check if the token is close to expiration
	if time.Now().After(sdk.tokenExpiry) {
		url := "https://www.reddit.com/api/v1/access_token"
		data := urlpkg.Values{}
		data.Set("grant_type", "refresh_token")
		data.Set("refresh_token", sdk.refreshToken)

		req, err := http.NewRequest("POST", url, strings.NewReader(data.Encode()))

		if err != nil {
			return fmt.Errorf("failed to create new request: %w", err)
		}

		// Set Basic Authentication using client ID and client secret
		req.SetBasicAuth(sdk.clientID, sdk.clientSecret)
		req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		req.Header.Set("User-Agent", sdk.userAgent)

		resp, err := sdk.httpClient.Do(req)
		if err != nil {
			return fmt.Errorf("request to refresh token failed: %w", err)
		}
		defer resp.Body.Close()

		// Check if the status code indicates success
		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			return fmt.Errorf("failed to refresh token, status: %d, response: %s", resp.StatusCode, string(body))
		}

		// Parse the response JSON
		var result struct {
			AccessToken string `json:"access_token"`
			ExpiresIn   int    `json:"expires_in"`
		}
		if err := jsonpkg.NewDecoder(resp.Body).Decode(&result); err != nil {
			return fmt.Errorf("failed to decode response: %w", err)
		}

		// Check if access token is available in the response
		if result.AccessToken == "" {
			return fmt.Errorf("missing access token in response")
		}

		// Update the access token and expiry time
		sdk.accessToken = result.AccessToken
		sdk.tokenExpiry = time.Now().Add(time.Duration(result.ExpiresIn-60) * time.Second) // Set expiry 1 minute earlier for safety
	}
	return nil
}


func (sdk *ReddiGoSDK) MakeRequest(method, endpoint string, body io.Reader) (*http.Response, error) {
	url := fmt.Sprintf("https://oauth.reddit.com%s", endpoint)
	req, err := http.NewRequest(method, url, body)
	if err != nil {
		return nil, err
	}

	if body != nil {
        req.Header.Set("Content-Type", "application/json")
    }

	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", sdk.accessToken))
	req.Header.Set("User-Agent", sdk.userAgent)

	resp, err := sdk.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	// If response indicates unauthorized (e.g., token issue), handle it
	if resp.StatusCode == http.StatusUnauthorized {
		// Retry token refresh and the request if the token was invalid
		if err := sdk.refreshTokenIfNeeded(); err != nil {
			return nil, fmt.Errorf("failed to refresh token on retry: %w", err)
		}

		// Retry the request with the refreshed token
		req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", sdk.accessToken))
		resp, err = sdk.httpClient.Do(req)
		if err != nil {
			return nil, fmt.Errorf("retry request failed: %w", err)
		}
	}

	return resp, nil
}
